name: news-system

services:
  # Существующий микросервис news-parser
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: news-parser:latest
    container_name: ms-parser
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      - db
      - kafka

  # Существующая база данных PostgreSQL
  db:
    image: postgres:14.2
    hostname: postgres
    container_name: postgres-container
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5432:5432"
    command: [ "postgres", "-c", "log_statement=all", "-c", "wal_level=logical",
               "-c", "max_replication_slots=4" ]

  # Добавляем Zookeeper для Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: debezium_zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Добавляем Kafka
  kafka:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka
    container_name: debezium_kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 5000
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 29092" ]
      interval: 10s
      timeout: 5s
      retries: 10

  init-kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: debezium_init_kafka
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    volumes:
      - ./common-services/etc/docker/kafka/init-kafka-topics.sh:/init-kafka-topics.sh
    command: /init-kafka-topics.sh

  # Добавляем Kafka UI для мониторинга
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: debezium_kafka_ui
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9000:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: true
    volumes:
      - ./common-services/etc/docker/kafka/config.yml:/etc/kafkaui/dynamic_config.yaml

  # Добавляем Kafka Connect с Debezium
  kafka-connect:
    build:
      context: ./common-services/etc/docker/debezium-jmx-exporter
      args:
        JMX_AGENT_VERSION: 0.15.0
    container_name: debezium_connect
    restart: unless-stopped
    ports:
      - "8083:8083"
      - "1976:1976"
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_started
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=kafka_connect_configs
      - OFFSET_STORAGE_TOPIC=kafka_connect_offsets
      - STATUS_STORAGE_TOPIC=kafka_connect_statuses
      - KAFKA_OPTS=-javaagent:/kafka/etc/jmx_prometheus_javaagent.jar=8080:/kafka/etc/config.yml
      - JMXHOST=localhost
      - JMXPORT=1976
    healthcheck:
      test: [ "CMD-SHELL", "curl -sSf http://localhost:8083/connectors || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

  # Добавляем Prometheus
  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: debezium_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    depends_on:
      kafka-connect:
        condition: service_healthy
    volumes:
      - ./common-services/etc/docker/debezium-prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  # Добавляем Grafana
  grafana:
    build:
      context: ./common-services/etc/docker/debezium-grafana
    container_name: debezium_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - DS_PROMETHEUS=prometheus